
BpiUno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000005d8  0000066c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080010a  0080010a  00000676  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000676  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bef  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090a  00000000  00000000  000013c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ef7  00000000  00000000  00001cd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c4  00000000  00000000  00002bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007d61  00000000  00000000  00002e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000544  00000000  00000000  0000abed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000b131  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000302d  00000000  00000000  0000b1e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 32 01 	jmp	0x264	; 0x264 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ed       	ldi	r30, 0xD8	; 216
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9d 01 	call	0x33a	; 0x33a <main>
  9e:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <a2dInit>:

// return TRUE if conversion is complete
u08 a2dIsComplete(void)
{
	return bit_is_set(ADCSR, ADSC);
}
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	8a e7       	ldi	r24, 0x7A	; 122
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	2a e7       	ldi	r18, 0x7A	; 122
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	f9 01       	movw	r30, r18
  b8:	20 81       	ld	r18, Z
  ba:	20 68       	ori	r18, 0x80	; 128
  bc:	fc 01       	movw	r30, r24
  be:	20 83       	st	Z, r18
  c0:	8a e7       	ldi	r24, 0x7A	; 122
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	2a e7       	ldi	r18, 0x7A	; 122
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	f9 01       	movw	r30, r18
  ca:	20 81       	ld	r18, Z
  cc:	2f 7d       	andi	r18, 0xDF	; 223
  ce:	fc 01       	movw	r30, r24
  d0:	20 83       	st	Z, r18
  d2:	86 e0       	ldi	r24, 0x06	; 6
  d4:	0e 94 88 00 	call	0x110	; 0x110 <a2dSetPrescaler>
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	0e 94 9f 00 	call	0x13e	; 0x13e <a2dSetReference>
  de:	8c e7       	ldi	r24, 0x7C	; 124
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	2c e7       	ldi	r18, 0x7C	; 124
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	f9 01       	movw	r30, r18
  e8:	20 81       	ld	r18, Z
  ea:	2f 7d       	andi	r18, 0xDF	; 223
  ec:	fc 01       	movw	r30, r24
  ee:	20 83       	st	Z, r18
  f0:	8a e7       	ldi	r24, 0x7A	; 122
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	2a e7       	ldi	r18, 0x7A	; 122
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	f9 01       	movw	r30, r18
  fa:	20 81       	ld	r18, Z
  fc:	28 60       	ori	r18, 0x08	; 8
  fe:	fc 01       	movw	r30, r24
 100:	20 83       	st	Z, r18
 102:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <a2dCompleteFlag>
 106:	78 94       	sei
 108:	00 00       	nop
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <a2dSetPrescaler>:
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	1f 92       	push	r1
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
 11a:	89 83       	std	Y+1, r24	; 0x01
 11c:	8a e7       	ldi	r24, 0x7A	; 122
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	2a e7       	ldi	r18, 0x7A	; 122
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	f9 01       	movw	r30, r18
 126:	20 81       	ld	r18, Z
 128:	32 2f       	mov	r19, r18
 12a:	38 7f       	andi	r19, 0xF8	; 248
 12c:	29 81       	ldd	r18, Y+1	; 0x01
 12e:	23 2b       	or	r18, r19
 130:	fc 01       	movw	r30, r24
 132:	20 83       	st	Z, r18
 134:	00 00       	nop
 136:	0f 90       	pop	r0
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <a2dSetReference>:
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	1f 92       	push	r1
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
 148:	89 83       	std	Y+1, r24	; 0x01
 14a:	8c e7       	ldi	r24, 0x7C	; 124
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	2c e7       	ldi	r18, 0x7C	; 124
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	f9 01       	movw	r30, r18
 154:	20 81       	ld	r18, Z
 156:	42 2f       	mov	r20, r18
 158:	4f 73       	andi	r20, 0x3F	; 63
 15a:	29 81       	ldd	r18, Y+1	; 0x01
 15c:	22 2f       	mov	r18, r18
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	00 24       	eor	r0, r0
 162:	36 95       	lsr	r19
 164:	27 95       	ror	r18
 166:	07 94       	ror	r0
 168:	36 95       	lsr	r19
 16a:	27 95       	ror	r18
 16c:	07 94       	ror	r0
 16e:	32 2f       	mov	r19, r18
 170:	20 2d       	mov	r18, r0
 172:	24 2b       	or	r18, r20
 174:	fc 01       	movw	r30, r24
 176:	20 83       	st	Z, r18
 178:	00 00       	nop
 17a:	0f 90       	pop	r0
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <a2dStartConvert>:
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	cd b7       	in	r28, 0x3d	; 61
 188:	de b7       	in	r29, 0x3e	; 62
 18a:	8a e7       	ldi	r24, 0x7A	; 122
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	2a e7       	ldi	r18, 0x7A	; 122
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	f9 01       	movw	r30, r18
 194:	20 81       	ld	r18, Z
 196:	20 61       	ori	r18, 0x10	; 16
 198:	fc 01       	movw	r30, r24
 19a:	20 83       	st	Z, r18
 19c:	8a e7       	ldi	r24, 0x7A	; 122
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	2a e7       	ldi	r18, 0x7A	; 122
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	f9 01       	movw	r30, r18
 1a6:	20 81       	ld	r18, Z
 1a8:	20 64       	ori	r18, 0x40	; 64
 1aa:	fc 01       	movw	r30, r24
 1ac:	20 83       	st	Z, r18
 1ae:	00 00       	nop
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <a2dConvert10bit>:

// Perform a 10-bit conversion
// starts conversion, waits until conversion is done, and returns result
unsigned short a2dConvert10bit(unsigned char ch)
{
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	1f 92       	push	r1
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
 1c0:	89 83       	std	Y+1, r24	; 0x01
	a2dCompleteFlag = FALSE;				// clear conversion complete flag
 1c2:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <a2dCompleteFlag>
	outb(ADMUX, (inb(ADMUX) & ~ADC_MUX_MASK) | (ch & ADC_MUX_MASK));	// set channel
 1c6:	8c e7       	ldi	r24, 0x7C	; 124
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	2c e7       	ldi	r18, 0x7C	; 124
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	f9 01       	movw	r30, r18
 1d0:	20 81       	ld	r18, Z
 1d2:	32 2f       	mov	r19, r18
 1d4:	30 7e       	andi	r19, 0xE0	; 224
 1d6:	29 81       	ldd	r18, Y+1	; 0x01
 1d8:	2f 71       	andi	r18, 0x1F	; 31
 1da:	23 2b       	or	r18, r19
 1dc:	fc 01       	movw	r30, r24
 1de:	20 83       	st	Z, r18
	sbi(ADCSR, ADIF);						// clear hardware "conversion complete" flag 
 1e0:	8a e7       	ldi	r24, 0x7A	; 122
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	2a e7       	ldi	r18, 0x7A	; 122
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	f9 01       	movw	r30, r18
 1ea:	20 81       	ld	r18, Z
 1ec:	20 61       	ori	r18, 0x10	; 16
 1ee:	fc 01       	movw	r30, r24
 1f0:	20 83       	st	Z, r18
	sbi(ADCSR, ADSC);						// start conversion
 1f2:	8a e7       	ldi	r24, 0x7A	; 122
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	2a e7       	ldi	r18, 0x7A	; 122
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	f9 01       	movw	r30, r18
 1fc:	20 81       	ld	r18, Z
 1fe:	20 64       	ori	r18, 0x40	; 64
 200:	fc 01       	movw	r30, r24
 202:	20 83       	st	Z, r18
	//while(!a2dCompleteFlag);				// wait until conversion complete
	//while( bit_is_clear(ADCSR, ADIF) );		// wait until conversion complete
	while( bit_is_set(ADCSR, ADSC) );		// wait until conversion complete
 204:	00 00       	nop
 206:	8a e7       	ldi	r24, 0x7A	; 122
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	fc 01       	movw	r30, r24
 20c:	80 81       	ld	r24, Z
 20e:	88 2f       	mov	r24, r24
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	80 74       	andi	r24, 0x40	; 64
 214:	99 27       	eor	r25, r25
 216:	89 2b       	or	r24, r25
 218:	b1 f7       	brne	.-20     	; 0x206 <a2dConvert10bit+0x50>

	// CAUTION: MUST READ ADCL BEFORE ADCH!!!
	return (inb(ADCL) | (inb(ADCH)<<8));	// read ADC (full 10 bits);
 21a:	88 e7       	ldi	r24, 0x78	; 120
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	fc 01       	movw	r30, r24
 220:	80 81       	ld	r24, Z
 222:	28 2f       	mov	r18, r24
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	89 e7       	ldi	r24, 0x79	; 121
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	fc 01       	movw	r30, r24
 22c:	80 81       	ld	r24, Z
 22e:	88 2f       	mov	r24, r24
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	98 2f       	mov	r25, r24
 234:	88 27       	eor	r24, r24
 236:	82 2b       	or	r24, r18
 238:	93 2b       	or	r25, r19
}
 23a:	0f 90       	pop	r0
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <a2dConvert8bit>:

// Perform a 8-bit conversion.
// starts conversion, waits until conversion is done, and returns result
unsigned char a2dConvert8bit(unsigned char ch)
{
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	1f 92       	push	r1
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
 24c:	89 83       	std	Y+1, r24	; 0x01
	// do 10-bit conversion and return highest 8 bits
	return a2dConvert10bit(ch)>>2;			// return ADC MSB byte
 24e:	89 81       	ldd	r24, Y+1	; 0x01
 250:	0e 94 db 00 	call	0x1b6	; 0x1b6 <a2dConvert10bit>
 254:	96 95       	lsr	r25
 256:	87 95       	ror	r24
 258:	96 95       	lsr	r25
 25a:	87 95       	ror	r24
}
 25c:	0f 90       	pop	r0
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <__vector_21>:

//! Interrupt handler for ADC complete interrupt.
ISR(ADC_vect)
{
 264:	1f 92       	push	r1
 266:	0f 92       	push	r0
 268:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 26c:	0f 92       	push	r0
 26e:	11 24       	eor	r1, r1
 270:	8f 93       	push	r24
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	cd b7       	in	r28, 0x3d	; 61
 278:	de b7       	in	r29, 0x3e	; 62
	// set the a2d conversion flag to indicate "complete"
	a2dCompleteFlag = TRUE;
 27a:	8f ef       	ldi	r24, 0xFF	; 255
 27c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <a2dCompleteFlag>
}
 280:	00 00       	nop
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	8f 91       	pop	r24
 288:	0f 90       	pop	r0
 28a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 28e:	0f 90       	pop	r0
 290:	1f 90       	pop	r1
 292:	18 95       	reti

00000294 <setupPins>:
#include "avrlibtypes.h"
#include "avrlibdefs.h"
#include "main.h"


void setupPins(){
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	cd b7       	in	r28, 0x3d	; 61
 29a:	de b7       	in	r29, 0x3e	; 62
	// buttons
	DDRD ^= ((1 << PIND2) | (1 << PIND3) | (1 << PIND4) | (1 << PIND5));	// inputs
 29c:	8a e2       	ldi	r24, 0x2A	; 42
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	2a e2       	ldi	r18, 0x2A	; 42
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	f9 01       	movw	r30, r18
 2a6:	30 81       	ld	r19, Z
 2a8:	2c e3       	ldi	r18, 0x3C	; 60
 2aa:	23 27       	eor	r18, r19
 2ac:	fc 01       	movw	r30, r24
 2ae:	20 83       	st	Z, r18
	PORTD |= ((1 << PIND2) | (1 << PIND3) | (1 << PIND4) | (1 << PIND5));	// pull-up	
 2b0:	8b e2       	ldi	r24, 0x2B	; 43
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	2b e2       	ldi	r18, 0x2B	; 43
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	f9 01       	movw	r30, r18
 2ba:	20 81       	ld	r18, Z
 2bc:	2c 63       	ori	r18, 0x3C	; 60
 2be:	fc 01       	movw	r30, r24
 2c0:	20 83       	st	Z, r18
}
 2c2:	00 00       	nop
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <readButtons>:

void readButtons(u08 *ptr){
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	00 d0       	rcall	.+0      	; 0x2d0 <readButtons+0x6>
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
 2d4:	9a 83       	std	Y+2, r25	; 0x02
 2d6:	89 83       	std	Y+1, r24	; 0x01
	ptr[BUT0] = 0;
 2d8:	89 81       	ldd	r24, Y+1	; 0x01
 2da:	9a 81       	ldd	r25, Y+2	; 0x02
 2dc:	04 96       	adiw	r24, 0x04	; 4
 2de:	fc 01       	movw	r30, r24
 2e0:	10 82       	st	Z, r1
	ptr[BUT0] |= ~PIND & ((1 << PIND5) | (1 << PIND4) | (1 << PIND3) | (1 << PIND2));
 2e2:	89 e2       	ldi	r24, 0x29	; 41
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	fc 01       	movw	r30, r24
 2e8:	80 81       	ld	r24, Z
 2ea:	88 2f       	mov	r24, r24
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	80 95       	com	r24
 2f0:	90 95       	com	r25
 2f2:	ac 01       	movw	r20, r24
 2f4:	4c 73       	andi	r20, 0x3C	; 60
 2f6:	55 27       	eor	r21, r21
 2f8:	89 81       	ldd	r24, Y+1	; 0x01
 2fa:	9a 81       	ldd	r25, Y+2	; 0x02
 2fc:	04 96       	adiw	r24, 0x04	; 4
 2fe:	29 81       	ldd	r18, Y+1	; 0x01
 300:	3a 81       	ldd	r19, Y+2	; 0x02
 302:	2c 5f       	subi	r18, 0xFC	; 252
 304:	3f 4f       	sbci	r19, 0xFF	; 255
 306:	f9 01       	movw	r30, r18
 308:	20 81       	ld	r18, Z
 30a:	32 2f       	mov	r19, r18
 30c:	24 2f       	mov	r18, r20
 30e:	23 2b       	or	r18, r19
 310:	fc 01       	movw	r30, r24
 312:	20 83       	st	Z, r18
	ptr[BUT0] >>= 2;	
 314:	89 81       	ldd	r24, Y+1	; 0x01
 316:	9a 81       	ldd	r25, Y+2	; 0x02
 318:	04 96       	adiw	r24, 0x04	; 4
 31a:	29 81       	ldd	r18, Y+1	; 0x01
 31c:	3a 81       	ldd	r19, Y+2	; 0x02
 31e:	2c 5f       	subi	r18, 0xFC	; 252
 320:	3f 4f       	sbci	r19, 0xFF	; 255
 322:	f9 01       	movw	r30, r18
 324:	20 81       	ld	r18, Z
 326:	26 95       	lsr	r18
 328:	26 95       	lsr	r18
 32a:	fc 01       	movw	r30, r24
 32c:	20 83       	st	Z, r18
}
 32e:	00 00       	nop
 330:	0f 90       	pop	r0
 332:	0f 90       	pop	r0
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	08 95       	ret

0000033a <main>:


extern u08 spiTransferComplete;
extern u08 inputValues[6];

int main(int argc, char** argv) {
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	00 d0       	rcall	.+0      	; 0x340 <main+0x6>
 340:	00 d0       	rcall	.+0      	; 0x342 <main+0x8>
 342:	cd b7       	in	r28, 0x3d	; 61
 344:	de b7       	in	r29, 0x3e	; 62
 346:	9a 83       	std	Y+2, r25	; 0x02
 348:	89 83       	std	Y+1, r24	; 0x01
 34a:	7c 83       	std	Y+4, r23	; 0x04
 34c:	6b 83       	std	Y+3, r22	; 0x03

      
		
    a2dInit();
 34e:	0e 94 53 00 	call	0xa6	; 0xa6 <a2dInit>
	a2dSetPrescaler(ADC_PRESCALE_DIV32);
 352:	85 e0       	ldi	r24, 0x05	; 5
 354:	0e 94 88 00 	call	0x110	; 0x110 <a2dSetPrescaler>
	a2dSetReference(ADC_REFERENCE_AVCC);
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	0e 94 9f 00 	call	0x13e	; 0x13e <a2dSetReference>
	a2dStartConvert();
 35e:	0e 94 c1 00 	call	0x182	; 0x182 <a2dStartConvert>
	setupPins();
 362:	0e 94 4a 01 	call	0x294	; 0x294 <setupPins>
	spiInit();
 366:	0e 94 6f 02 	call	0x4de	; 0x4de <spiInit>
    SPDR = 0xFF;
 36a:	8e e4       	ldi	r24, 0x4E	; 78
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	2f ef       	ldi	r18, 0xFF	; 255
 370:	fc 01       	movw	r30, r24
 372:	20 83       	st	Z, r18
	
    while(1){
        
		inputValues[ADC0] = a2dConvert8bit(ADC_CH_ADC0);  
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	0e 94 21 01 	call	0x242	; 0x242 <a2dConvert8bit>
 37a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		inputValues[ADC1] = a2dConvert8bit(ADC_CH_ADC1);
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	0e 94 21 01 	call	0x242	; 0x242 <a2dConvert8bit>
 384:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__data_start+0x1>
		inputValues[JOYX] = a2dConvert8bit(ADC_CH_ADC2);
 388:	82 e0       	ldi	r24, 0x02	; 2
 38a:	0e 94 21 01 	call	0x242	; 0x242 <a2dConvert8bit>
 38e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
		inputValues[JOYY] = a2dConvert8bit(ADC_CH_ADC3);
 392:	83 e0       	ldi	r24, 0x03	; 3
 394:	0e 94 21 01 	call	0x242	; 0x242 <a2dConvert8bit>
 398:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__data_start+0x3>
		readButtons(inputValues);
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	0e 94 65 01 	call	0x2ca	; 0x2ca <readButtons>
		
    }
 3a4:	e7 cf       	rjmp	.-50     	; 0x374 <main+0x3a>

000003a6 <__vector_17>:
u08 inputBytes[3] = {ADC_BYTES,JOY_BYTES,BUT_BYTES};
u08 inputIndex = 0;
inputType currInp = NONE;

SIGNAL(SPI_STC_vect)
{
 3a6:	1f 92       	push	r1
 3a8:	0f 92       	push	r0
 3aa:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 3ae:	0f 92       	push	r0
 3b0:	11 24       	eor	r1, r1
 3b2:	2f 93       	push	r18
 3b4:	3f 93       	push	r19
 3b6:	8f 93       	push	r24
 3b8:	9f 93       	push	r25
 3ba:	ef 93       	push	r30
 3bc:	ff 93       	push	r31
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	1f 92       	push	r1
 3c4:	cd b7       	in	r28, 0x3d	; 61
 3c6:	de b7       	in	r29, 0x3e	; 62
	u08 byte = SPDR;
 3c8:	8e e4       	ldi	r24, 0x4E	; 78
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	fc 01       	movw	r30, r24
 3ce:	80 81       	ld	r24, Z
 3d0:	89 83       	std	Y+1, r24	; 0x01
	static u08 byteCount = 0;
	
	switch(byte){
 3d2:	89 81       	ldd	r24, Y+1	; 0x01
 3d4:	88 2f       	mov	r24, r24
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	82 30       	cpi	r24, 0x02	; 2
 3da:	91 05       	cpc	r25, r1
 3dc:	89 f0       	breq	.+34     	; 0x400 <__LOCK_REGION_LENGTH__>
 3de:	83 30       	cpi	r24, 0x03	; 3
 3e0:	91 05       	cpc	r25, r1
 3e2:	d9 f0       	breq	.+54     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3e4:	01 97       	sbiw	r24, 0x01	; 1
 3e6:	09 f0       	breq	.+2      	; 0x3ea <__vector_17+0x44>
					currInp = BUT;
					inputIndex = BUT0;
					byteCount = 0;
				}
				break;
		default: break;
 3e8:	2a c0       	rjmp	.+84     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
{
	u08 byte = SPDR;
	static u08 byteCount = 0;
	
	switch(byte){
		case 1: if(currInp != POT){
 3ea:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <currInp>
 3ee:	88 23       	and	r24, r24
 3f0:	09 f1       	breq	.+66     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
					currInp = POT;
 3f2:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <currInp>
					inputIndex = ADC0;
 3f6:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <inputIndex>
					byteCount = 0;
 3fa:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <byteCount.1851>
				}
				break;
 3fe:	1a c0       	rjmp	.+52     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		case 2: if(currInp != JOY){
 400:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <currInp>
 404:	81 30       	cpi	r24, 0x01	; 1
 406:	c1 f0       	breq	.+48     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
					currInp = JOY;
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <currInp>
					inputIndex = JOYX;
 40e:	82 e0       	ldi	r24, 0x02	; 2
 410:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <inputIndex>
					byteCount = 0;
 414:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <byteCount.1851>
				}
				break;
 418:	0f c0       	rjmp	.+30     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
		case 3: if(currInp != BUT){
 41a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <currInp>
 41e:	82 30       	cpi	r24, 0x02	; 2
 420:	69 f0       	breq	.+26     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
					currInp = BUT;
 422:	82 e0       	ldi	r24, 0x02	; 2
 424:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <currInp>
					inputIndex = BUT0;
 428:	84 e0       	ldi	r24, 0x04	; 4
 42a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <inputIndex>
					byteCount = 0;
 42e:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <byteCount.1851>
				}
				break;
 432:	04 c0       	rjmp	.+8      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		case 1: if(currInp != POT){
					currInp = POT;
					inputIndex = ADC0;
					byteCount = 0;
				}
				break;
 434:	00 00       	nop
 436:	03 c0       	rjmp	.+6      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		case 2: if(currInp != JOY){
					currInp = JOY;
					inputIndex = JOYX;
					byteCount = 0;
				}
				break;
 438:	00 00       	nop
 43a:	01 c0       	rjmp	.+2      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		case 3: if(currInp != BUT){
					currInp = BUT;
					inputIndex = BUT0;
					byteCount = 0;
				}
				break;
 43c:	00 00       	nop
		default: break;
						
	}
	if(currInp == POT || currInp == JOY || currInp == BUT){
 43e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <currInp>
 442:	88 23       	and	r24, r24
 444:	41 f0       	breq	.+16     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 446:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <currInp>
 44a:	81 30       	cpi	r24, 0x01	; 1
 44c:	21 f0       	breq	.+8      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 44e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <currInp>
 452:	82 30       	cpi	r24, 0x02	; 2
 454:	61 f5       	brne	.+88     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
		if(byteCount < inputBytes[currInp]){
 456:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <currInp>
 45a:	88 2f       	mov	r24, r24
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	8a 5f       	subi	r24, 0xFA	; 250
 460:	9e 4f       	sbci	r25, 0xFE	; 254
 462:	fc 01       	movw	r30, r24
 464:	90 81       	ld	r25, Z
 466:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <byteCount.1851>
 46a:	89 17       	cp	r24, r25
 46c:	b8 f4       	brcc	.+46     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
			SPDR = inputValues[inputIndex];
 46e:	8e e4       	ldi	r24, 0x4E	; 78
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <inputIndex>
 476:	22 2f       	mov	r18, r18
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	20 50       	subi	r18, 0x00	; 0
 47c:	3f 4f       	sbci	r19, 0xFF	; 255
 47e:	f9 01       	movw	r30, r18
 480:	20 81       	ld	r18, Z
 482:	fc 01       	movw	r30, r24
 484:	20 83       	st	Z, r18
			inputIndex++;
 486:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <inputIndex>
 48a:	8f 5f       	subi	r24, 0xFF	; 255
 48c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <inputIndex>
			byteCount++;
 490:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <byteCount.1851>
 494:	8f 5f       	subi	r24, 0xFF	; 255
 496:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <byteCount.1851>
				break;
		default: break;
						
	}
	if(currInp == POT || currInp == JOY || currInp == BUT){
		if(byteCount < inputBytes[currInp]){
 49a:	0e c0       	rjmp	.+28     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
			SPDR = inputValues[inputIndex];
			inputIndex++;
			byteCount++;
		}
		else{
			SPDR = 0xFF;
 49c:	8e e4       	ldi	r24, 0x4E	; 78
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	2f ef       	ldi	r18, 0xFF	; 255
 4a2:	fc 01       	movw	r30, r24
 4a4:	20 83       	st	Z, r18
			currInp = NONE;
 4a6:	83 e0       	ldi	r24, 0x03	; 3
 4a8:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <currInp>
				break;
		default: break;
						
	}
	if(currInp == POT || currInp == JOY || currInp == BUT){
		if(byteCount < inputBytes[currInp]){
 4ac:	05 c0       	rjmp	.+10     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
			SPDR = 0xFF;
			currInp = NONE;
		}
	}
	else
		SPDR = 0xFF;
 4ae:	8e e4       	ldi	r24, 0x4E	; 78
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	2f ef       	ldi	r18, 0xFF	; 255
 4b4:	fc 01       	movw	r30, r24
 4b6:	20 83       	st	Z, r18
	
	spiTransferComplete = TRUE;
 4b8:	8f ef       	ldi	r24, 0xFF	; 255
 4ba:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	
}
 4be:	00 00       	nop
 4c0:	0f 90       	pop	r0
 4c2:	df 91       	pop	r29
 4c4:	cf 91       	pop	r28
 4c6:	ff 91       	pop	r31
 4c8:	ef 91       	pop	r30
 4ca:	9f 91       	pop	r25
 4cc:	8f 91       	pop	r24
 4ce:	3f 91       	pop	r19
 4d0:	2f 91       	pop	r18
 4d2:	0f 90       	pop	r0
 4d4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 4d8:	0f 90       	pop	r0
 4da:	1f 90       	pop	r1
 4dc:	18 95       	reti

000004de <spiInit>:


// init SPI in slave mode
void spiInit()
{
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	cd b7       	in	r28, 0x3d	; 61
 4e4:	de b7       	in	r29, 0x3e	; 62

    // setup SPI I/O pins
    sbi(PORTB, 5);  // set SCK hi
 4e6:	85 e2       	ldi	r24, 0x25	; 37
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	25 e2       	ldi	r18, 0x25	; 37
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	f9 01       	movw	r30, r18
 4f0:	20 81       	ld	r18, Z
 4f2:	20 62       	ori	r18, 0x20	; 32
 4f4:	fc 01       	movw	r30, r24
 4f6:	20 83       	st	Z, r18
    cbi(DDRB, 5);   // set SCK as input
 4f8:	84 e2       	ldi	r24, 0x24	; 36
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	24 e2       	ldi	r18, 0x24	; 36
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	f9 01       	movw	r30, r18
 502:	20 81       	ld	r18, Z
 504:	2f 7d       	andi	r18, 0xDF	; 223
 506:	fc 01       	movw	r30, r24
 508:	20 83       	st	Z, r18
    sbi(DDRB, 4);   // set MISO as output
 50a:	84 e2       	ldi	r24, 0x24	; 36
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	24 e2       	ldi	r18, 0x24	; 36
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	f9 01       	movw	r30, r18
 514:	20 81       	ld	r18, Z
 516:	20 61       	ori	r18, 0x10	; 16
 518:	fc 01       	movw	r30, r24
 51a:	20 83       	st	Z, r18
    cbi(DDRB, 3);   // set MOSI as input
 51c:	84 e2       	ldi	r24, 0x24	; 36
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	24 e2       	ldi	r18, 0x24	; 36
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	f9 01       	movw	r30, r18
 526:	20 81       	ld	r18, Z
 528:	27 7f       	andi	r18, 0xF7	; 247
 52a:	fc 01       	movw	r30, r24
 52c:	20 83       	st	Z, r18
    cbi(DDRB, 2);   // SS must be input for slave mode to work
 52e:	84 e2       	ldi	r24, 0x24	; 36
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	24 e2       	ldi	r18, 0x24	; 36
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	f9 01       	movw	r30, r18
 538:	20 81       	ld	r18, Z
 53a:	2b 7f       	andi	r18, 0xFB	; 251
 53c:	fc 01       	movw	r30, r24
 53e:	20 83       	st	Z, r18
	
	// setup SPI interface :
	cbi(SPCR, SPR0);
 540:	8c e4       	ldi	r24, 0x4C	; 76
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	2c e4       	ldi	r18, 0x4C	; 76
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	f9 01       	movw	r30, r18
 54a:	20 81       	ld	r18, Z
 54c:	2e 7f       	andi	r18, 0xFE	; 254
 54e:	fc 01       	movw	r30, r24
 550:	20 83       	st	Z, r18
	sbi(SPCR, SPR1);
 552:	8c e4       	ldi	r24, 0x4C	; 76
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	2c e4       	ldi	r18, 0x4C	; 76
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	f9 01       	movw	r30, r18
 55c:	20 81       	ld	r18, Z
 55e:	22 60       	ori	r18, 0x02	; 2
 560:	fc 01       	movw	r30, r24
 562:	20 83       	st	Z, r18
	// select clock phase positive-going in middle of data
	cbi(SPCR, CPOL);
 564:	8c e4       	ldi	r24, 0x4C	; 76
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	2c e4       	ldi	r18, 0x4C	; 76
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	f9 01       	movw	r30, r18
 56e:	20 81       	ld	r18, Z
 570:	27 7f       	andi	r18, 0xF7	; 247
 572:	fc 01       	movw	r30, r24
 574:	20 83       	st	Z, r18
	cbi(SPCR,CPHA);
 576:	8c e4       	ldi	r24, 0x4C	; 76
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	2c e4       	ldi	r18, 0x4C	; 76
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	f9 01       	movw	r30, r18
 580:	20 81       	ld	r18, Z
 582:	2b 7f       	andi	r18, 0xFB	; 251
 584:	fc 01       	movw	r30, r24
 586:	20 83       	st	Z, r18
	// Data order MSB first
	cbi(SPCR,DORD);
 588:	8c e4       	ldi	r24, 0x4C	; 76
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	2c e4       	ldi	r18, 0x4C	; 76
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	f9 01       	movw	r30, r18
 592:	20 81       	ld	r18, Z
 594:	2f 7d       	andi	r18, 0xDF	; 223
 596:	fc 01       	movw	r30, r24
 598:	20 83       	st	Z, r18
	// enable SPI with interrupt
	sbi(SPCR, SPE);
 59a:	8c e4       	ldi	r24, 0x4C	; 76
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	2c e4       	ldi	r18, 0x4C	; 76
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	f9 01       	movw	r30, r18
 5a4:	20 81       	ld	r18, Z
 5a6:	20 64       	ori	r18, 0x40	; 64
 5a8:	fc 01       	movw	r30, r24
 5aa:	20 83       	st	Z, r18
	sbi(SPCR, SPIE);	
 5ac:	8c e4       	ldi	r24, 0x4C	; 76
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	2c e4       	ldi	r18, 0x4C	; 76
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	f9 01       	movw	r30, r18
 5b6:	20 81       	ld	r18, Z
 5b8:	20 68       	ori	r18, 0x80	; 128
 5ba:	fc 01       	movw	r30, r24
 5bc:	20 83       	st	Z, r18
	//outp((1<<MSTR)|(1<<SPE)|(1<<SPR0), SPCR );
	//outp((1<<CPHA)|(1<<CPOL)|(1<<MSTR)|(1<<SPE)|(1<<SPR0)|(1<<SPR1), SPCR );
	//outp((1<<CPHA)|(1<<MSTR)|(1<<SPE)|(1<<SPR0), SPCR );
	
	// clear status
	inb(SPSR);
 5be:	8d e4       	ldi	r24, 0x4D	; 77
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	fc 01       	movw	r30, r24
 5c4:	80 81       	ld	r24, Z
	spiTransferComplete = TRUE;
 5c6:	8f ef       	ldi	r24, 0xFF	; 255
 5c8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
}
 5cc:	00 00       	nop
 5ce:	df 91       	pop	r29
 5d0:	cf 91       	pop	r28
 5d2:	08 95       	ret

000005d4 <_exit>:
 5d4:	f8 94       	cli

000005d6 <__stop_program>:
 5d6:	ff cf       	rjmp	.-2      	; 0x5d6 <__stop_program>
